import os
import logging
from dotenv import load_dotenv
from telegram import Update
from telegram.error import TelegramError, Forbidden
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    MessageHandler,
    filters,
)

# ‚îÄ‚îÄ Env ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
load_dotenv("stack.env", override=False)

LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO").upper()
logging.basicConfig(
    level=getattr(logging, LOG_LEVEL, logging.INFO),
    format="%(asctime)s %(levelname)s %(name)s | %(message)s",
)
log = logging.getLogger("deleter-bot")

BOT_TOKEN = os.getenv("BOT_TOKEN")
TARGET_CHAT_ID_RAW = os.getenv("TARGET_CHAT_ID")
BLOCKED_USER_ID = int(os.getenv("BLOCKED_USER_ID", "329047005"))

if not BOT_TOKEN:
    raise RuntimeError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω (stack.env –∏–ª–∏ ENV).")
if not TARGET_CHAT_ID_RAW:
    raise RuntimeError("‚ùå TARGET_CHAT_ID –Ω–µ –Ω–∞–π–¥–µ–Ω (stack.env –∏–ª–∏ ENV).")
TARGET_CHAT_ID = int(TARGET_CHAT_ID_RAW)


# ‚îÄ‚îÄ Handlers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def purge_user_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç BLOCKED_USER_ID. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏."""
    msg = update.effective_message
    if not msg:
        return

    user = msg.from_user
    if user is None:
        # –≠—Ç–æ –±—ã–≤–∞–µ—Ç, –µ—Å–ª–∏ –ø—Ä–∏–ª–µ—Ç–µ–ª channel_post –∏ —Ç.–ø.
        log.warning(
            "üì£ –ü–æ–ª—É—á–µ–Ω update –±–µ–∑ from_user (msg_id=%s, chat_id=%s). "
            "–í –∫–∞–Ω–∞–ª–∞—Ö –Ω–µ–ª—å–∑—è —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ user_id; –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ (supergroup).",
            getattr(msg, "message_id", None),
            getattr(msg, "chat_id", None),
        )
        return

    log.debug(
        "–ö —É–¥–∞–ª–µ–Ω–∏—é: chat_id=%s, msg_id=%s, from_user_id=%s (%s), text=%r",
        msg.chat_id,
        msg.message_id,
        user.id,
        user.full_name,
        getattr(msg, "text", None),
    )

    try:
        await msg.delete()
        log.info(
            "‚úÖ –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ %s –æ—Ç user_id=%s –≤ —á–∞—Ç–µ %s",
            msg.message_id,
            user.id,
            msg.chat_id,
        )
    except Forbidden as e:
        log.error(
            "‚ùå Forbidden –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ (–Ω–µ—Ç –ø—Ä–∞–≤ Delete messages / –±–æ—Ç –Ω–µ –∞–¥–º–∏–Ω?). –ü—Ä–∏—á–∏–Ω–∞: %s",
            e,
        )
    except TelegramError as e:
        log.error("‚ùå TelegramError –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ msg_id=%s: %s", msg.message_id, e)
    except Exception as e:
        log.exception("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ msg_id=%s: %s", msg.message_id, e)


async def log_every_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π –ª–æ–≥ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ü–µ–ª–µ–≤–æ–º —á–∞—Ç–µ."""
    msg = update.effective_message
    if not msg:
        return
    user = msg.from_user
    log.info(
        "üì© –í–∏–∂—É —Å–æ–æ–±—â–µ–Ω–∏–µ: chat_id=%s, msg_id=%s, from_user_id=%s (%s), text=%r",
        msg.chat_id,
        msg.message_id,
        getattr(user, "id", None),
        getattr(user, "full_name", None),
        getattr(msg, "text", None),
    )


async def startup_check(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ: –ª–æ–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ, —Ç–∏–ø–µ —á–∞—Ç–∞, –ø—Ä–∞–≤–∞—Ö –∏ linked_chat_id."""
    bot = context.bot
    try:
        me = await bot.get_me()
        log.info("ü§ñ –Ø –±–æ—Ç: @%s (id=%s)", me.username, me.id)
    except Exception as e:
        log.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ–¥–µ–Ω–∏—è –æ –±–æ—Ç–µ: %s", e)

    try:
        chat = await bot.get_chat(TARGET_CHAT_ID)
        log.info("üîé –ü—Ä–æ–≤–µ—Ä—è—é —á–∞—Ç: title=%r, type=%s, id=%s", chat.title, chat.type, chat.id)

        # –ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤: –æ–±—Å—É–∂–¥–µ–Ω–∏–µ (supergroup)
        linked_chat_id = getattr(chat, "linked_chat_id", None)
        if linked_chat_id:
            log.warning(
                "‚ÑπÔ∏è –£ —á–∞—Ç–∞ –µ—Å—Ç—å linked_chat_id=%s (–æ–±—ã—á–Ω–æ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞). "
                "–î–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ user_id –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–º–µ–Ω–Ω–æ –µ–≥–æ –∫–∞–∫ TARGET_CHAT_ID.",
                linked_chat_id,
            )
    except Exception as e:
        log.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —á–∞—Ç %s: %s", TARGET_CHAT_ID, e)
        return

    try:
        member = await bot.get_chat_member(TARGET_CHAT_ID, (await bot.get_me()).id)
        status = getattr(member, "status", None)
        can_delete = getattr(member, "can_delete_messages", None)
        can_restrict = getattr(member, "can_restrict_members", None)
        log.info(
            "üëÆ –ü—Ä–∞–≤–∞ –±–æ—Ç–∞: status=%s, can_delete_messages=%s, can_restrict_members=%s",
            status,
            can_delete,
            can_restrict,
        )

        if status not in ("administrator", "creator"):
            log.warning("‚ö†Ô∏è –ë–æ—Ç –ù–ï –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –ù–∞–∑–Ω–∞—á—å—Ç–µ –∞–¥–º–∏–Ω–æ–º –∏ –≤–∫–ª—é—á–∏—Ç–µ 'Delete messages'.")
        elif can_delete is False:
            log.warning("‚ö†Ô∏è –£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤–∞ '–£–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è'. –í–∫–ª—é—á–∏—Ç–µ –µ–≥–æ.")
        else:
            log.info("‚úÖ –ü—Ä–∞–≤–∞ –≤—ã–≥–ª—è–¥—è—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    except Exception as e:
        log.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –±–æ—Ç–∞: %s", e)


async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    log.exception("üö® –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: %s", context.error)


# ‚îÄ‚îÄ App ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def main() -> None:
    # –í–∞–∂–Ω–æ: –¥–ª—è JobQueue —Ç—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞:  pip install "python-telegram-bot[job-queue]"
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # 0-—è –≥—Ä—É–ø–ø–∞ ‚Äî –°–ù–ê–ß–ê–õ–ê —É–¥–∞–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    app.add_handler(
        MessageHandler(
            filters.Chat(TARGET_CHAT_ID) & filters.User(user_id=BLOCKED_USER_ID),
            purge_user_message,
        ),
        group=0,
    )

    # 1-—è –≥—Ä—É–ø–ø–∞ ‚Äî –∑–∞—Ç–µ–º –ª–æ–≥–∏—Ä—É–µ–º –≤—Å—ë –∏ –ù–ï –±–ª–æ–∫–∏—Ä—É–µ–º
    app.add_handler(
        MessageHandler(
            filters.Chat(TARGET_CHAT_ID),
            log_every_message,
            block=False,
        ),
        group=1,
    )

    app.add_error_handler(error_handler)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ (–µ—Å–ª–∏ JobQueue —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
    if app.job_queue:
        app.job_queue.run_once(startup_check, when=1.0)
    else:
        log.warning(
            "‚ÑπÔ∏è JobQueue –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å: "
            'pip install "python-telegram-bot[job-queue]" ‚Äî –∏–Ω–∞—á–µ startup_check –Ω–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.'
        )

    log.info(
        "üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ß–∞—Ç: %s | –¶–µ–ª—å: —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç user_id=%s",
        TARGET_CHAT_ID,
        BLOCKED_USER_ID,
    )
    app.run_polling(close_loop=False)


if __name__ == "__main__":
    main()
